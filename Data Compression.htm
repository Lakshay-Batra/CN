<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>MAIN</title>
<style>
<!--
 li.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
-->
</style>
</head>

<body>

<p align="center"><b><font face="Arial"><a href="Main.htm">MAIN</a></font></b></p>
<p align="center"><u><font face="Arial" size="6" color="#FF0000"><b>DATA 
COMPRESSION</b></font></u></p>
<p><font face="Arial">Raw images require so much storage that some type of data 
compression is used for storage. For example, a 1024 x 1024 24 bit image require 
3 Mbytes of space. A 640 x 480 24 bit image requires 1 Mbyte of space so a video 
that runs at 640 x 480 resolution with 24 bits of color and 30 frames per second 
(fps) would require 30 Mbytes of storage per second.</font></p>
<p><font face="Arial">There are two types of data compression algorithms, one 
that maintains data integrity and one that does not. Lossless compression 
maintains data integrity, i.e., after compression and decompression, the 
resulting image is exactly the same as the initial uncompressed image. These 
techniques are also used for compressing data files and executable program 
files. Lossy compression does not maintain data integrity, i.e., the 
uncompressed image is similar to but not exactly the same as the initial image. 
There is a tradeoff between amount of data lost and the amount of compression. 
Lossy compression methods provide a higher compression ratio than lossless 
methods.</font></p>
<p><font face="Arial">Another characteristic of data compression methods is 
symmetric versus asymmetric. A symmetric method compresses and decompresses 
images in the same amount of time. This type of technique would be used for data 
transmission as in interactive video. An asymmetric technique might take a long 
time to compress an image but the decompression would be rapid. Asymmetric 
techniques can achieve much higher data compression ratios than symmetric 
techniques.</font></p>
<p><font face="Arial">For Video or on-line computer animation there may be 
inter-frame compression as well as intra-frame compression. There will be 
reference frames, e.g. every 15 frames, and successive frames are stored as the 
difference between them and the reference frames.</font></p>
<p><b><font face="Arial">Tools:</font></b></p>
<p><font face="Arial">• BigSpeed Zipper - Compact ZIP tool with unusual features 
such as browsing ZIP files before downloading and full-text search of ZIP file 
contents. <br>
• Bzip2 and Libbzip2 - Patent free, high-quality data compressor for Windows or 
Unix. <br>
• Cathonian Ventures Ltd - Zipfusion - Flexible self-extractor, use with any zip 
tools that create type 0 (stored) and type 8 (deflate) format zip files. Feature 
a built-in configuration editor. <br>
• dczip - Freeware data compression utility for zip, tar, gzip and bzip2 files. 
Requires Java 1.3 or better. <br>
• Dzip - Compact Windows compression program that creates small .DZ archive 
files. Integrates with Windows Explorer. <br>
• EnZip - Windows Explorer-integrated Zip program which can also build 
self-extracting archives with customized interfaces. <br>
• ExtZ - Extended Z Filesystem For Linux. Transparent compression and automatic 
encryption. <br>
• FileCompress Uharc Gui - A free Uharc 0.4 Gui with SFX and other features like 
preview of .uha file. <br>
• Free WinZIP Alternatives - A roundup and review of fully WinZIP-compatible 
freeware ZIP programs -- compared on the basis of usability. <br>
• FreeZip - Windows zip utility that prides itself on being small, fast and 
efficient. <br>
• Gzip - Open source command line data stream compressor and archiver. <br>
• ICEOWS - Windows compression utility using the ARJ format (was called 
ArjFolder). Can extract, test, and view files stored in ZIP, GZIP, TAR, CAB, RAR, 
ACE, PK3, etc. and create SFX executables. <br>
• JustZIPit - Small and simple contextual menu based zip program with full 
ZIP-64 huge-archive compression. <br>
• LZX - Encoding for Amigas that uses large match offsets and file merging. <br>
• MultiZipper - Unzip program for Windows that doesn't prompt before overwriting 
files. Supports shell links, drag and drop, and command line. <br>
• Quick Zip - Free zip compression utility for Windows, create, extract, and 
testing for zip archives. <br>
• StuffIt Expander - Decompresses all files in any of the StuffIt formats. It 
will also decode single and multi-part BinHex files. [Win/Solaris/Linux/Mac] <br>
• Tugzip - Free archiving utility with Windows integration, script support and 
ZIP-64 for huge archives. Website provides a free support forum. <br>
• UltimateZip - Supports a wide variety of archive types, creates self 
extracting archives, integrates with mail and virus scan, and integrates with 
Windows Explorer. <br>
• WinBZip2 - A small GUI utility for working with files in bzip2 format, 
compressing, decompressing and testing the integrity of bzip2 files. <br>
• WinGZip - A small GUI utility for working with files in gzip format. It allows 
to compress any file into gzip format, decompress and test the integrity of 
already gzipped files. <br>
• WinImp - Extracts ZIP, ARJ, RAR, TAR as well as higher-compression IMP format. 
Includes drag-and-drop capability and creation of custom SFX files which can 
launch a file after unpacking. <br>
• XStandard Zip Component - ZIP or unzip a file or folder using a single line of 
code with this free component. [ActiveX DLL] <br>
• Zip 2 Secure EXE - Utility to convert any ZIP file into a self-extracting 
executable. Supports AES encryption, can unpack automatically to a temporary 
directory and run a setup.exe after extraction. <br>
• zipdiff - An open source Java utility for comparing two zip files. Also 
suitable for JAR, EAR, WAR and RAR files. <br>
• Zipfocus - A small zip file reader for general use or restoring backups from 
floppy/flash/cd drive. <br>
• ZipFree 2000 - ZIP tool with integrated virus check and integrated emailing 
for quick ZIP and send. Supports SFX creation and pre-extraction viewing. <br>
• ZIPGenius - A full-featured ZIP program with SFX and ZIP-64 support. Also 
supports AES encryption 7-ZIP format and integrated image-viewing. <br>
• ZipItFast - ZIP program with a skinned interface and full support for over 20 
compression formats. <br>
• Zipper - Can zip, unzip and make executable files, and view unzip directories 
before software installation. <br>
<b><br>
</b></font><font face="Arial"><b>RAR &amp;&amp; ZIP: </b>It stands for <u>
<strong style="font-weight: 400">R</strong></u>oshal <u>
<strong style="font-weight: 400">Ar</strong></u>chiver in the same way that the 
PK in PKZip stands for <strong style="font-weight: 400"><u>P</u></strong>hil <u>
<strong style="font-weight: 400">K</strong></u>atz. </font></p>
<h1 align="center"><font size="3" face="Arial">JPEG File Format</font></h1>
<p><font face="Arial">This is an ISO standard by the Joint Photographic Experts 
Group. It can be both lossy and lossless, but most implementations are lossy and 
allow the user to determine the image quality. JPEG is a two pass compression 
and de-compression algorithm. This means it take longer to load and display than 
a gif file. For the sample images below, the 640 x 480 jpeg file took about 3 
times as long to load as did the gif file ( 12 seconds to 4 seconds on a 66mhz 
486). The times will be dependent upon processor speed but the relative times 
should be about the same.</font></p>
<h2><font size="3" face="Arial">Example Images: </font></h2>
<p><font face="Arial">Here are six JPEG images. The size of the original bmp 
file is 921,654 bytes. </font></p>
<p><font face="Arial">
<img src="redball.gif" align="bottom" width="14" height="14"> image 1: JPEG (90% 
quality) file size = 101,853 bytes - identical to the original in quality</font></p>
<p><font face="Arial">
<img src="redball.gif" align="bottom" width="14" height="14"> image 2: JPEG (75% 
quality) file size = 57,447 bytes </font></p>
<p><font face="Arial">
<img src="redball.gif" align="bottom" width="14" height="14"> image3: JPEG (50% 
quality) file size = 37,139 bytes </font></p>
<p><font face="Arial">
<img src="redball.gif" align="bottom" width="14" height="14"> image 4: JPEG (25% 
quality) file size = 22,837 bytes </font></p>
<p><font face="Arial">
<img src="redball.gif" align="bottom" width="14" height="14"> image 5: JPEG (15% 
quality) file size = 17,814 bytes </font></p>
<p><font face="Arial">
<img src="redball.gif" align="bottom" width="14" height="14"> image 6: JPEG (10% 
quality) file size = 14,164 bytes </font></p>
<p>&nbsp;</p>
<p><span style="font-family:Arial">A <b>lossy data compression</b> method is one 
where compressing data and then decompressing it retrieves data that may well be 
different from the original, but is &quot;close enough&quot; to be useful in some way. 
Lossy data compression is used frequently on the Internet and especially in 
streaming media and telephony applications. These methods are typically referred 
to as codecs in this context. Most lossy data compression formats suffer from 
generation loss: repeatedly compressing and decompressing the file will cause it 
to progressively lose quality.</span></p>
<h2><span style="font-size:12.0pt;font-family:Arial">Types of lossy compression</span></h2>
<p><span style="font-family:Arial">There are two basic lossy compression 
schemes:</span></p>
<ul type="disc" style="margin-bottom: 0in">
  <li class="MsoNormal"><span style="font-family:
     Arial">In lossy transform codecs, samples of picture or sound are taken, 
  chopped into small segments, transformed into a new basis space, and 
  quantized. The resulting quantized values are then entropy coded. </span></li>
</ul>
<ul type="disc" style="margin-bottom: 0in">
  <li class="MsoNormal"><span style="font-family:
     Arial">In lossy predictive codecs, previous and/or subsequent decoded data 
  is used to predict the current sound sample or image frame. The error between 
  the predicted data and the real data, together with any extra information 
  needed to reproduce the prediction, is then quantized and coded. </span></li>
</ul>
<p><span style="font-family:Arial">In some systems the two techniques are 
combined, with transform codecs being used to compress the error signals 
generated by the predictive stage.</span></p>
<h2><span style="font-size:12.0pt;font-family:Arial">Lossy vs. Lossless 
Compression</span></h2>
<p><span style="font-family:Arial">The advantage of lossy methods over lossless 
methods is that in some cases a lossy method can produce a much smaller 
compressed file than any known lossless method, while still meeting the 
requirements of the application.</span></p>
<p><span style="font-family:Arial">Lossy methods are most often used for 
compressing sound, images or videos. The compression ratio (that is, the size of 
the compressed file compared to that of the uncompressed file) of lossy video 
codecs are nearly always far superior to those of the audio and still-image 
equivalents. Audio can be compressed at 10:1 with no noticeable loss of quality, 
video can be compressed immensely with little visible quality loss, eg 300:1. 
Lossily compressed still images are often compressed to 1/10th their original 
size, as with audio, but the quality loss is more noticeable, especially on 
closer inspection.</span></p>
<p><span style="font-family:Arial">When a user acquires a lossily-compressed 
file, (for example, to reduce download-time) the retrieved file can be quite 
different from the original at the bit level while being indistinguishable to 
the human ear or eye for most practical purposes. Many methods focus on the 
idiosyncrasies of the human anatomy, taking into account, for example, that the 
human eye can see only certain frequencies of light. The psychoacoustic model 
describes how sound can be highly compressed without degrading the perceived 
quality of the sound. Flaws caused by lossy compression that are noticeable to 
the human eye or ear are known as compression artifacts.</span></p>
<p class="MsoNormal"><b>&nbsp;<font size="3" face="Arial">Example of Lossy Compression</font></b></p>
<table>
  <tr vAlign="top">
    <td>
    <div class="thumb tright">
      <div style="WIDTH: 130px">
        <font face="Arial">
        <a class="internal" title="Original Lenna Image (12KB size)" href="http://en.wikipedia.org/wiki/Image:Lena.jpg">
        <img alt="Original Lenna Image (12KB size)" src="Lena.jpg" longDesc="file:///D:/wiki/Image:Lena.jpg" width="128" height="128"></a>
        </font>
        <div class="thumbcaption">
          <font face="Arial">Original Lenna Image (12KB size)</font></div>
      </div>
    </div>
    </td>
    <td>
    <div class="thumb tright">
      <div style="WIDTH: 130px">
        <font face="Arial">
        <a class="internal" title="Lenna Image, Compressed (85% less information, 1.8KB)" href="http://en.wikipedia.org/wiki/Image:Lena30.jpg">
        <img alt="Lenna Image, Compressed (85% less information, 1.8KB)" src="Lena30.jpg" longDesc="file:///D:/wiki/Image:Lena30.jpg" width="128" height="128"></a>
        </font>
        <div class="thumbcaption">
          <font face="Arial">Lenna Image, Compressed (85% less information, 
          1.8KB)</font></div>
      </div>
    </div>
    </td>
    <td>
    <div class="thumb tright">
      <div style="WIDTH: 130px">
        <font face="Arial">
        <a class="internal" title="Lenna Image, Highly Compressed (96% less information, 0.56KB)" href="http://en.wikipedia.org/wiki/Image:Lena5.jpg">
        <img alt="Lenna Image, Highly Compressed (96% less information, 0.56KB)" src="Lena5.jpg" longDesc="file:///D:/wiki/Image:Lena5.jpg" width="128" height="128"></a>
        </font>
        <div class="thumbcaption">
          <font face="Arial">Lenna Image, Highly Compressed (96% less 
          information, 0.56KB)</font></div>
      </div>
    </div>
    </td>
  </tr>
</table>
<p><font face="Arial">T</font><span style="font-family:Arial">he above images 
show the use of lossy compression to reduce the file size of the image. The 
image is an excerpt of the image of Lenna, a de facto industry-standard test 
image.</span></p>
<ul type="disc" lastCheckbox="null" style="margin-bottom: 0in">
  <li class="MsoNormal"><span style="font-family:
     Arial">The first picture is 12,249 bytes. </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">The second picture has been compressed (JPEG quality 30) and is 85% 
  smaller, at 1,869 bytes. Notice the loss of detail. </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">The third picture has been highly compressed (JPEG quality 5) and is 
  96% smaller, at 559 bytes. The compression artifacts are much more noticeable.
  </span></li>
</ul>
<p><span style="font-family:Arial">Even though the third image has high 
distortion, the face is still recognizable. Good lossy compression algorithms 
are able to throw away &quot;less important&quot; information and still retain the 
&quot;essential&quot; information.</span></p>
<blockquote>
  <blockquote>
    <p class="MsoNormal"><font face="Arial"><br>
    <b>Image compression</b><br>
    Fractal compression <br>
    JPEG <br>
    JPEG2000, JPEG's successor format that uses wavelets. <br>
    Wavelet compression <br>
    Cartesian Perceptual Compression: Also known as CPC <br>
    DjVu <br>
    ICER, used by the Mars Rovers: related to JPEG2000 in its use of wavelets
    <br>
    <br>
    <b>Video compression</b><br>
    Flash (also supports JPEG sprites) <br>
    H.261 <br>
    H.263 <br>
    H.264/MPEG-4 AVC <br>
    MNG (supports JPEG sprites) <br>
    Motion JPEG <br>
    MPEG-1 Part 2 <br>
    MPEG-2 Part 2 <br>
    MPEG-4 Part 2 <br>
    Ogg Theora (noted for its lack of patent restrictions) <br>
    Sorenson video codec <br>
    VC-1 </font></p>
    <p class="MsoNormal"><font face="Arial"><br>
    <b>Music compression</b><br>
    AAC - used by, for example, Apple Computer <br>
    ADPCM <br>
    ATRAC <br>
    Dolby AC-3 <br>
    MP2 <br>
    MP3 <br>
    Musepack <br>
    Ogg Vorbis (noted for its lack of patent restrictions) <br>
    WMA - Microsoft invention <br>
    <br>
    <b>Speech compression</b><br>
    CELP <br>
    G.711 <br>
    G.726 <br>
    HILN <br>
    AMR (used by GSM cell carriers, such as T-Mobile) <br>
    Speex (noted for its lack of patent restrictions) <br>
&nbsp;</font></p>
  </blockquote>
</blockquote>
<p><font face="Arial"><b>Lossless data compression</b> is a class of
data compression algorithms 
that allows the exact original data to be reconstructed from the compressed 
data. This can be contrasted to
lossy data compression, which does not allow the exact original data to be 
reconstructed from the compressed data.</font></p>
<p><font face="Arial">Lossless data compression is in many applications. For 
example, it is used in the popular
ZIP file format and in the Unix tool gzip. It is also 
often used as a component within lossy data compression technologies.</font></p>
<p><font face="Arial">Lossless compression is used when it is important that the 
original and the decompressed data be identical, or when no assumption can be 
made on whether certain deviation is uncritical. Typical examples are executable 
programs and source code. Some image file formats, notably PNG, use only 
lossless compression, while others like TIFF and MNG may use either 
lossless or lossy methods. GIF uses a lossless 
compression method, but most GIF implementations are incapable of representing 
full color, so they quantize 
the image (often with dithering) 
to 256 or fewer colors before encoding as GIF. Color quantization is a lossy 
process, but reconstructing the color image and then re-quantizing it produces 
no additional loss. (Some rare GIF implementations make multiple passes over an 
image, adding 255 new colors on each pass.)</font></p>
<p>&nbsp;</p>
<h2><font size="3" face="Arial">Lossless compression techniques</font></h2>
<p><font face="Arial">Lossless compression methods may be categorized according 
to the type of data they are designed to compress. The three main types of 
targets for compression algorithms are text, images, and sound. Whilst, in 
principle, any general-purpose lossless compression algorithm (general-purpose 
means that they can handle all binary input) can be used on any type of data, 
many are unable to achieve significant compression on data that is not of the 
form that they are designed to deal with. Sound data, for instance, cannot be 
compressed well with conventional text compression algorithms.</font></p>
<p><font face="Arial">Most lossless compression programs use two different kinds 
of algorithms: one which generates a <i>statistical model</i> for the input 
data, and another which maps the input data to bit strings using this model in 
such a way that &quot;probable&quot; (e.g. frequently encountered) data will produce 
shorter output than &quot;improbable&quot; data. Often, only the former algorithm is 
named, while the second is implied (through common use, standardization etc.) or 
unspecified.</font></p>
<p><font face="Arial">Statistical modelling algorithms for text (or text-like 
binary data such as executables) include:</font></p>
<ul lastCheckbox="null">
  <li><font face="Arial">
  Burrows-Wheeler transform (block sorting preprocessing that makes 
  compression more efficient) </font></li>
  <li><font face="Arial">
  LZ77 (used by
  DEFLATE) </font></li>
  <li><font face="Arial">LZW </font></li>
</ul>
<p><font face="Arial">Encoding algorithms to produce bit sequences are:</font></p>
<ul lastCheckbox="null">
  <li><font face="Arial">
  Huffman coding (also used by
  DEFLATE) </font></li>
  <li><font face="Arial">
  Arithmetic coding </font></li>
</ul>
<p><font face="Arial">Many of these methods are implemented in open-source and 
proprietary tools, particularly LZW and its variants. Some algorithms are 
patented in the USA 
and other countries and their legal usage requires licensing by the patent 
holder. Because of patents on certain kinds of LZW compression, and in 
particular licensing practices by patent holder Unisys that many developers 
considered abusive, some open source activists encouraged people to avoid using 
the Graphics Interchange Format (GIF) 
for compressing image files in favor of Portable Network Graphics PNG, which combines 
the
LZ77-based
deflate algorithm with a selection of domain-specific prediction filters.</font></p>
<p><font face="Arial">Many of the lossless compression techniques used for text 
also work reasonably well for
indexed images, but there are other techniques that do not work for typical 
text that are useful for some images (particularly simple bitmaps), and other 
techniques that take advantage of the specific characteristics of images (such 
as the common phenomenon of contiguous 2-D areas of similar tones, and the fact 
that colour images usually have a preponderance to a limited range of colours 
out of those representable in the colour space).</font></p>
<p><font face="Arial">As mentioned previously, lossless sound compression is a 
somewhat specialised area. Lossless sound compression algorithms can take 
advantage of the repeating patterns shown by the wave-like nature of the data - 
essentially using models to predict the &quot;next&quot; value and encoding the (hopefully 
small) difference between the expected value and the actual data. If the 
difference between the predicted and the actual data (called the &quot;error&quot;) tends 
to be small, then certain difference values (like 0, +1, -1 etc. on sample 
values) become very frequent, which can be exploited by encoding them in few 
output bits.</font></p>
<p><font face="Arial">It is sometimes beneficial to compress only the 
differences between two versions of a file (or, in
video compression, of an image). This is called
delta compression (from the Greek letter &#916; 
which is commonly used in mathematics to denote a difference), but the term is 
typically only used if both versions are meaningful outside compression and 
decompression. For example, while the process of compressing the error in the 
above-mentioned lossless audio compression scheme could be described as
delta compression from the approximated sound wave to the original sound 
wave, the approximated version of the sound wave is not meaningful in any other 
context.</font></p>
<h3><font face="Arial"><span style="font-size:12.0pt">Audio compression</span></font></h3>
<ul type="disc" lastCheckbox="null" style="margin-bottom: 0in">
  <li class="MsoNormal"><span style="font-family:
     Arial">Apple Lossless - ALAC (Apple Lossless Audio Codec) </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">Direct Stream Transfer - DST </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">Free Lossless Audio Codec - FLAC </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">Meridian Lossless Packing - MLP </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">Monkey's Audio - Monkey's Audio APE </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">RealPlayer - RealAudio Lossless </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">Shorten - SHN </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">TTA - True Audio Lossless </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">WavPack - WavPack lossless </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">WMA Lossless - Windows Media Lossless </span></li>
</ul>
<h3><font face="Arial"><span style="font-size:12.0pt">Graphic compression</span></font></h3>
<ul type="disc" lastCheckbox="null" style="margin-bottom: 0in">
  <li class="MsoNormal"><span style="font-family:
     Arial">ABO - Adaptive Binary Optimization </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">GIF </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">PNG - Portable Network Graphics </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">JPEG-LS - (lossless/near-lossless compression standard) </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">JPEG 2000 - (includes lossless compression method) </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">JBIG2 - (lossless or lossy compression of B&amp;W images) </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">TIFF </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">WMPhoto - (includes lossless compression method) </span></li>
</ul>
<h3><font face="Arial"><span style="font-size:12.0pt">Video compression</span></font></h3>
<ul type="disc" lastCheckbox="null" style="margin-bottom: 0in">
  <li class="MsoNormal"><span style="font-family:
     Arial">Huffyuv </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">SheerVideo </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">CorePNG [1] </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">MSU Lossless Video Codec </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">LCL [2] </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">Animation codec </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">Lagarith </span></li>
  <li class="MsoNormal"><span style="font-family:
     Arial">H.264/MPEG-4 AVC </span></li>
</ul>
<p align="center"><b><font face="Arial"><a href="Main.htm">MAIN</a></font></b></p>

</body>

</html>